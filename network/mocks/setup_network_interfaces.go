// Code generated by MockGen. DO NOT EDIT.
// Source: setup_network_interfaces.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AddBridge mocks base method.
func (m *MockService) AddBridge(br string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBridge", br)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddBridge indicates an expected call of AddBridge.
func (mr *MockServiceMockRecorder) AddBridge(br interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBridge", reflect.TypeOf((*MockService)(nil).AddBridge), br)
}

// AddTap mocks base method.
func (m *MockService) AddTap(tap string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTap", tap)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTap indicates an expected call of AddTap.
func (mr *MockServiceMockRecorder) AddTap(tap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTap", reflect.TypeOf((*MockService)(nil).AddTap), tap)
}

// AddTapToBridge mocks base method.
func (m *MockService) AddTapToBridge(br, tap string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTapToBridge", br, tap)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddTapToBridge indicates an expected call of AddTapToBridge.
func (mr *MockServiceMockRecorder) AddTapToBridge(br, tap interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTapToBridge", reflect.TypeOf((*MockService)(nil).AddTapToBridge), br, tap)
}

// CheckBridgeHasInterface mocks base method.
func (m *MockService) CheckBridgeHasInterface(bridgeName, ifcName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckBridgeHasInterface", bridgeName, ifcName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckBridgeHasInterface indicates an expected call of CheckBridgeHasInterface.
func (mr *MockServiceMockRecorder) CheckBridgeHasInterface(bridgeName, ifcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckBridgeHasInterface", reflect.TypeOf((*MockService)(nil).CheckBridgeHasInterface), bridgeName, ifcName)
}

// CheckNetworkInterfaceExists mocks base method.
func (m *MockService) CheckNetworkInterfaceExists(name string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckNetworkInterfaceExists", name)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckNetworkInterfaceExists indicates an expected call of CheckNetworkInterfaceExists.
func (mr *MockServiceMockRecorder) CheckNetworkInterfaceExists(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckNetworkInterfaceExists", reflect.TypeOf((*MockService)(nil).CheckNetworkInterfaceExists), name)
}

// DeleteNIC mocks base method.
func (m *MockService) DeleteNIC(ifc string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNIC", ifc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteNIC indicates an expected call of DeleteNIC.
func (mr *MockServiceMockRecorder) DeleteNIC(ifc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNIC", reflect.TypeOf((*MockService)(nil).DeleteNIC), ifc)
}

// FlushIPFromNI mocks base method.
func (m *MockService) FlushIPFromNI(niName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushIPFromNI", niName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FlushIPFromNI indicates an expected call of FlushIPFromNI.
func (mr *MockServiceMockRecorder) FlushIPFromNI(niName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushIPFromNI", reflect.TypeOf((*MockService)(nil).FlushIPFromNI), niName)
}

// GetBridgeInterfacesNames mocks base method.
func (m *MockService) GetBridgeInterfacesNames(bridgeName string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBridgeInterfacesNames", bridgeName)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBridgeInterfacesNames indicates an expected call of GetBridgeInterfacesNames.
func (mr *MockServiceMockRecorder) GetBridgeInterfacesNames(bridgeName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBridgeInterfacesNames", reflect.TypeOf((*MockService)(nil).GetBridgeInterfacesNames), bridgeName)
}

// GetNetworkInterfaceIP mocks base method.
func (m *MockService) GetNetworkInterfaceIP(ifcName string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNetworkInterfaceIP", ifcName)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNetworkInterfaceIP indicates an expected call of GetNetworkInterfaceIP.
func (mr *MockServiceMockRecorder) GetNetworkInterfaceIP(ifcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNetworkInterfaceIP", reflect.TypeOf((*MockService)(nil).GetNetworkInterfaceIP), ifcName)
}

// IsNIUp mocks base method.
func (m *MockService) IsNIUp(ifcName string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNIUp", ifcName)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsNIUp indicates an expected call of IsNIUp.
func (mr *MockServiceMockRecorder) IsNIUp(ifcName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNIUp", reflect.TypeOf((*MockService)(nil).IsNIUp), ifcName)
}

// ListBridges mocks base method.
func (m *MockService) ListBridges() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListBridges")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListBridges indicates an expected call of ListBridges.
func (mr *MockServiceMockRecorder) ListBridges() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListBridges", reflect.TypeOf((*MockService)(nil).ListBridges))
}

// SetNIIP mocks base method.
func (m *MockService) SetNIIP(ifc, ip, netmask string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetNIIP", ifc, ip, netmask)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SetNIIP indicates an expected call of SetNIIP.
func (mr *MockServiceMockRecorder) SetNIIP(ifc, ip, netmask interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetNIIP", reflect.TypeOf((*MockService)(nil).SetNIIP), ifc, ip, netmask)
}

// TurnNIDown mocks base method.
func (m *MockService) TurnNIDown(ifc string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnNIDown", ifc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TurnNIDown indicates an expected call of TurnNIDown.
func (mr *MockServiceMockRecorder) TurnNIDown(ifc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnNIDown", reflect.TypeOf((*MockService)(nil).TurnNIDown), ifc)
}

// TurnNIUp mocks base method.
func (m *MockService) TurnNIUp(ifc string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TurnNIUp", ifc)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TurnNIUp indicates an expected call of TurnNIUp.
func (mr *MockServiceMockRecorder) TurnNIUp(ifc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TurnNIUp", reflect.TypeOf((*MockService)(nil).TurnNIUp), ifc)
}

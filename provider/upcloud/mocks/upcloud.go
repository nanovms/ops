// Code generated by MockGen. DO NOT EDIT.
// Source: upcloud.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	upcloud "github.com/UpCloudLtd/upcloud-go-api/v6/upcloud"
	request "github.com/UpCloudLtd/upcloud-go-api/v6/upcloud/request"
	gomock "github.com/golang/mock/gomock"
)

// MockService is a mock of Service interface.
type MockService struct {
	ctrl     *gomock.Controller
	recorder *MockServiceMockRecorder
}

// MockServiceMockRecorder is the mock recorder for MockService.
type MockServiceMockRecorder struct {
	mock *MockService
}

// NewMockService creates a new mock instance.
func NewMockService(ctrl *gomock.Controller) *MockService {
	mock := &MockService{ctrl: ctrl}
	mock.recorder = &MockServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockService) EXPECT() *MockServiceMockRecorder {
	return m.recorder
}

// AttachStorage mocks base method.
func (m *MockService) AttachStorage(ctx context.Context, r *request.AttachStorageRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachStorage indicates an expected call of AttachStorage.
func (mr *MockServiceMockRecorder) AttachStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachStorage", reflect.TypeOf((*MockService)(nil).AttachStorage), ctx, r)
}

// CloneStorage mocks base method.
func (m *MockService) CloneStorage(ctx context.Context, r *request.CloneStorageRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CloneStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CloneStorage indicates an expected call of CloneStorage.
func (mr *MockServiceMockRecorder) CloneStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CloneStorage", reflect.TypeOf((*MockService)(nil).CloneStorage), ctx, r)
}

// CreateBackup mocks base method.
func (m *MockService) CreateBackup(ctx context.Context, r *request.CreateBackupRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateBackup", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateBackup indicates an expected call of CreateBackup.
func (mr *MockServiceMockRecorder) CreateBackup(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateBackup", reflect.TypeOf((*MockService)(nil).CreateBackup), ctx, r)
}

// CreateServer mocks base method.
func (m *MockService) CreateServer(ctx context.Context, r *request.CreateServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateServer indicates an expected call of CreateServer.
func (mr *MockServiceMockRecorder) CreateServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateServer", reflect.TypeOf((*MockService)(nil).CreateServer), ctx, r)
}

// CreateStorage mocks base method.
func (m *MockService) CreateStorage(ctx context.Context, r *request.CreateStorageRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorage indicates an expected call of CreateStorage.
func (mr *MockServiceMockRecorder) CreateStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorage", reflect.TypeOf((*MockService)(nil).CreateStorage), ctx, r)
}

// CreateStorageImport mocks base method.
func (m *MockService) CreateStorageImport(ctx context.Context, r *request.CreateStorageImportRequest) (*upcloud.StorageImportDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateStorageImport", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageImportDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateStorageImport indicates an expected call of CreateStorageImport.
func (mr *MockServiceMockRecorder) CreateStorageImport(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateStorageImport", reflect.TypeOf((*MockService)(nil).CreateStorageImport), ctx, r)
}

// CreateSubaccount mocks base method.
func (m *MockService) CreateSubaccount(ctx context.Context, r *request.CreateSubaccountRequest) (*upcloud.AccountDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubaccount", ctx, r)
	ret0, _ := ret[0].(*upcloud.AccountDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubaccount indicates an expected call of CreateSubaccount.
func (mr *MockServiceMockRecorder) CreateSubaccount(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubaccount", reflect.TypeOf((*MockService)(nil).CreateSubaccount), ctx, r)
}

// CreateTag mocks base method.
func (m *MockService) CreateTag(ctx context.Context, r *request.CreateTagRequest) (*upcloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTag", ctx, r)
	ret0, _ := ret[0].(*upcloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTag indicates an expected call of CreateTag.
func (mr *MockServiceMockRecorder) CreateTag(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTag", reflect.TypeOf((*MockService)(nil).CreateTag), ctx, r)
}

// DeleteServer mocks base method.
func (m *MockService) DeleteServer(ctx context.Context, r *request.DeleteServerRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServer", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServer indicates an expected call of DeleteServer.
func (mr *MockServiceMockRecorder) DeleteServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServer", reflect.TypeOf((*MockService)(nil).DeleteServer), ctx, r)
}

// DeleteServerAndStorages mocks base method.
func (m *MockService) DeleteServerAndStorages(ctx context.Context, r *request.DeleteServerAndStoragesRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteServerAndStorages", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteServerAndStorages indicates an expected call of DeleteServerAndStorages.
func (mr *MockServiceMockRecorder) DeleteServerAndStorages(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteServerAndStorages", reflect.TypeOf((*MockService)(nil).DeleteServerAndStorages), ctx, r)
}

// DeleteStorage mocks base method.
func (m *MockService) DeleteStorage(ctx context.Context, r *request.DeleteStorageRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteStorage", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteStorage indicates an expected call of DeleteStorage.
func (mr *MockServiceMockRecorder) DeleteStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteStorage", reflect.TypeOf((*MockService)(nil).DeleteStorage), ctx, r)
}

// DeleteSubaccount mocks base method.
func (m *MockService) DeleteSubaccount(ctx context.Context, r *request.DeleteSubaccountRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteSubaccount", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteSubaccount indicates an expected call of DeleteSubaccount.
func (mr *MockServiceMockRecorder) DeleteSubaccount(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteSubaccount", reflect.TypeOf((*MockService)(nil).DeleteSubaccount), ctx, r)
}

// DeleteTag mocks base method.
func (m *MockService) DeleteTag(ctx context.Context, r *request.DeleteTagRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTag", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTag indicates an expected call of DeleteTag.
func (mr *MockServiceMockRecorder) DeleteTag(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTag", reflect.TypeOf((*MockService)(nil).DeleteTag), ctx, r)
}

// DetachStorage mocks base method.
func (m *MockService) DetachStorage(ctx context.Context, r *request.DetachStorageRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachStorage indicates an expected call of DetachStorage.
func (mr *MockServiceMockRecorder) DetachStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachStorage", reflect.TypeOf((*MockService)(nil).DetachStorage), ctx, r)
}

// EjectCDROM mocks base method.
func (m *MockService) EjectCDROM(ctx context.Context, r *request.EjectCDROMRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EjectCDROM", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EjectCDROM indicates an expected call of EjectCDROM.
func (mr *MockServiceMockRecorder) EjectCDROM(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EjectCDROM", reflect.TypeOf((*MockService)(nil).EjectCDROM), ctx, r)
}

// GetAccount mocks base method.
func (m *MockService) GetAccount(ctx context.Context) (*upcloud.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", ctx)
	ret0, _ := ret[0].(*upcloud.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount.
func (mr *MockServiceMockRecorder) GetAccount(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockService)(nil).GetAccount), ctx)
}

// GetAccountDetails mocks base method.
func (m *MockService) GetAccountDetails(ctx context.Context, r *request.GetAccountDetailsRequest) (*upcloud.AccountDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountDetails", ctx, r)
	ret0, _ := ret[0].(*upcloud.AccountDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountDetails indicates an expected call of GetAccountDetails.
func (mr *MockServiceMockRecorder) GetAccountDetails(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountDetails", reflect.TypeOf((*MockService)(nil).GetAccountDetails), ctx, r)
}

// GetAccountList mocks base method.
func (m *MockService) GetAccountList(ctx context.Context) (upcloud.AccountList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccountList", ctx)
	ret0, _ := ret[0].(upcloud.AccountList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccountList indicates an expected call of GetAccountList.
func (mr *MockServiceMockRecorder) GetAccountList(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccountList", reflect.TypeOf((*MockService)(nil).GetAccountList), ctx)
}

// GetServerConfigurations mocks base method.
func (m *MockService) GetServerConfigurations(ctx context.Context) (*upcloud.ServerConfigurations, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerConfigurations", ctx)
	ret0, _ := ret[0].(*upcloud.ServerConfigurations)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerConfigurations indicates an expected call of GetServerConfigurations.
func (mr *MockServiceMockRecorder) GetServerConfigurations(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerConfigurations", reflect.TypeOf((*MockService)(nil).GetServerConfigurations), ctx)
}

// GetServerDetails mocks base method.
func (m *MockService) GetServerDetails(ctx context.Context, r *request.GetServerDetailsRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServerDetails", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServerDetails indicates an expected call of GetServerDetails.
func (mr *MockServiceMockRecorder) GetServerDetails(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServerDetails", reflect.TypeOf((*MockService)(nil).GetServerDetails), ctx, r)
}

// GetServers mocks base method.
func (m *MockService) GetServers(ctx context.Context) (*upcloud.Servers, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServers", ctx)
	ret0, _ := ret[0].(*upcloud.Servers)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetServers indicates an expected call of GetServers.
func (mr *MockServiceMockRecorder) GetServers(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServers", reflect.TypeOf((*MockService)(nil).GetServers), ctx)
}

// GetStorageDetails mocks base method.
func (m *MockService) GetStorageDetails(ctx context.Context, r *request.GetStorageDetailsRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageDetails", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageDetails indicates an expected call of GetStorageDetails.
func (mr *MockServiceMockRecorder) GetStorageDetails(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageDetails", reflect.TypeOf((*MockService)(nil).GetStorageDetails), ctx, r)
}

// GetStorageImportDetails mocks base method.
func (m *MockService) GetStorageImportDetails(ctx context.Context, r *request.GetStorageImportDetailsRequest) (*upcloud.StorageImportDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorageImportDetails", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageImportDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorageImportDetails indicates an expected call of GetStorageImportDetails.
func (mr *MockServiceMockRecorder) GetStorageImportDetails(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorageImportDetails", reflect.TypeOf((*MockService)(nil).GetStorageImportDetails), ctx, r)
}

// GetStorages mocks base method.
func (m *MockService) GetStorages(ctx context.Context, r *request.GetStoragesRequest) (*upcloud.Storages, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStorages", ctx, r)
	ret0, _ := ret[0].(*upcloud.Storages)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStorages indicates an expected call of GetStorages.
func (mr *MockServiceMockRecorder) GetStorages(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStorages", reflect.TypeOf((*MockService)(nil).GetStorages), ctx, r)
}

// GetTags mocks base method.
func (m *MockService) GetTags(ctx context.Context) (*upcloud.Tags, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTags", ctx)
	ret0, _ := ret[0].(*upcloud.Tags)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTags indicates an expected call of GetTags.
func (mr *MockServiceMockRecorder) GetTags(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTags", reflect.TypeOf((*MockService)(nil).GetTags), ctx)
}

// LoadCDROM mocks base method.
func (m *MockService) LoadCDROM(ctx context.Context, r *request.LoadCDROMRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadCDROM", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadCDROM indicates an expected call of LoadCDROM.
func (mr *MockServiceMockRecorder) LoadCDROM(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadCDROM", reflect.TypeOf((*MockService)(nil).LoadCDROM), ctx, r)
}

// ModifyServer mocks base method.
func (m *MockService) ModifyServer(ctx context.Context, r *request.ModifyServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyServer indicates an expected call of ModifyServer.
func (mr *MockServiceMockRecorder) ModifyServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyServer", reflect.TypeOf((*MockService)(nil).ModifyServer), ctx, r)
}

// ModifyStorage mocks base method.
func (m *MockService) ModifyStorage(ctx context.Context, r *request.ModifyStorageRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyStorage indicates an expected call of ModifyStorage.
func (mr *MockServiceMockRecorder) ModifyStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyStorage", reflect.TypeOf((*MockService)(nil).ModifyStorage), ctx, r)
}

// ModifySubaccount mocks base method.
func (m *MockService) ModifySubaccount(ctx context.Context, r *request.ModifySubaccountRequest) (*upcloud.AccountDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifySubaccount", ctx, r)
	ret0, _ := ret[0].(*upcloud.AccountDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifySubaccount indicates an expected call of ModifySubaccount.
func (mr *MockServiceMockRecorder) ModifySubaccount(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifySubaccount", reflect.TypeOf((*MockService)(nil).ModifySubaccount), ctx, r)
}

// ModifyTag mocks base method.
func (m *MockService) ModifyTag(ctx context.Context, r *request.ModifyTagRequest) (*upcloud.Tag, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ModifyTag", ctx, r)
	ret0, _ := ret[0].(*upcloud.Tag)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ModifyTag indicates an expected call of ModifyTag.
func (mr *MockServiceMockRecorder) ModifyTag(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ModifyTag", reflect.TypeOf((*MockService)(nil).ModifyTag), ctx, r)
}

// ResizeStorageFilesystem mocks base method.
func (m *MockService) ResizeStorageFilesystem(ctx context.Context, r *request.ResizeStorageFilesystemRequest) (*upcloud.ResizeStorageFilesystemBackup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ResizeStorageFilesystem", ctx, r)
	ret0, _ := ret[0].(*upcloud.ResizeStorageFilesystemBackup)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ResizeStorageFilesystem indicates an expected call of ResizeStorageFilesystem.
func (mr *MockServiceMockRecorder) ResizeStorageFilesystem(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ResizeStorageFilesystem", reflect.TypeOf((*MockService)(nil).ResizeStorageFilesystem), ctx, r)
}

// RestartServer mocks base method.
func (m *MockService) RestartServer(ctx context.Context, r *request.RestartServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestartServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RestartServer indicates an expected call of RestartServer.
func (mr *MockServiceMockRecorder) RestartServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestartServer", reflect.TypeOf((*MockService)(nil).RestartServer), ctx, r)
}

// RestoreBackup mocks base method.
func (m *MockService) RestoreBackup(ctx context.Context, r *request.RestoreBackupRequest) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RestoreBackup", ctx, r)
	ret0, _ := ret[0].(error)
	return ret0
}

// RestoreBackup indicates an expected call of RestoreBackup.
func (mr *MockServiceMockRecorder) RestoreBackup(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RestoreBackup", reflect.TypeOf((*MockService)(nil).RestoreBackup), ctx, r)
}

// StartServer mocks base method.
func (m *MockService) StartServer(ctx context.Context, r *request.StartServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StartServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StartServer indicates an expected call of StartServer.
func (mr *MockServiceMockRecorder) StartServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartServer", reflect.TypeOf((*MockService)(nil).StartServer), ctx, r)
}

// StopServer mocks base method.
func (m *MockService) StopServer(ctx context.Context, r *request.StopServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StopServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// StopServer indicates an expected call of StopServer.
func (mr *MockServiceMockRecorder) StopServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StopServer", reflect.TypeOf((*MockService)(nil).StopServer), ctx, r)
}

// TagServer mocks base method.
func (m *MockService) TagServer(ctx context.Context, r *request.TagServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TagServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TagServer indicates an expected call of TagServer.
func (mr *MockServiceMockRecorder) TagServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TagServer", reflect.TypeOf((*MockService)(nil).TagServer), ctx, r)
}

// TemplatizeStorage mocks base method.
func (m *MockService) TemplatizeStorage(ctx context.Context, r *request.TemplatizeStorageRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TemplatizeStorage", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TemplatizeStorage indicates an expected call of TemplatizeStorage.
func (mr *MockServiceMockRecorder) TemplatizeStorage(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TemplatizeStorage", reflect.TypeOf((*MockService)(nil).TemplatizeStorage), ctx, r)
}

// UntagServer mocks base method.
func (m *MockService) UntagServer(ctx context.Context, r *request.UntagServerRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UntagServer", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UntagServer indicates an expected call of UntagServer.
func (mr *MockServiceMockRecorder) UntagServer(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UntagServer", reflect.TypeOf((*MockService)(nil).UntagServer), ctx, r)
}

// WaitForServerState mocks base method.
func (m *MockService) WaitForServerState(ctx context.Context, r *request.WaitForServerStateRequest) (*upcloud.ServerDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForServerState", ctx, r)
	ret0, _ := ret[0].(*upcloud.ServerDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForServerState indicates an expected call of WaitForServerState.
func (mr *MockServiceMockRecorder) WaitForServerState(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForServerState", reflect.TypeOf((*MockService)(nil).WaitForServerState), ctx, r)
}

// WaitForStorageImportCompletion mocks base method.
func (m *MockService) WaitForStorageImportCompletion(ctx context.Context, r *request.WaitForStorageImportCompletionRequest) (*upcloud.StorageImportDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStorageImportCompletion", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageImportDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForStorageImportCompletion indicates an expected call of WaitForStorageImportCompletion.
func (mr *MockServiceMockRecorder) WaitForStorageImportCompletion(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStorageImportCompletion", reflect.TypeOf((*MockService)(nil).WaitForStorageImportCompletion), ctx, r)
}

// WaitForStorageState mocks base method.
func (m *MockService) WaitForStorageState(ctx context.Context, r *request.WaitForStorageStateRequest) (*upcloud.StorageDetails, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WaitForStorageState", ctx, r)
	ret0, _ := ret[0].(*upcloud.StorageDetails)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WaitForStorageState indicates an expected call of WaitForStorageState.
func (mr *MockServiceMockRecorder) WaitForStorageState(ctx, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WaitForStorageState", reflect.TypeOf((*MockService)(nil).WaitForStorageState), ctx, r)
}

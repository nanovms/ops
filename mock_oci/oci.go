// Code generated by MockGen. DO NOT EDIT.
// Source: oci/oci.go

// Package mock_oci is a generated GoMock package.
package mock_oci

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	core "github.com/oracle/oci-go-sdk/core"
	objectstorage "github.com/oracle/oci-go-sdk/objectstorage"
	workrequests "github.com/oracle/oci-go-sdk/workrequests"
	reflect "reflect"
)

// MockComputeService is a mock of ComputeService interface
type MockComputeService struct {
	ctrl     *gomock.Controller
	recorder *MockComputeServiceMockRecorder
}

// MockComputeServiceMockRecorder is the mock recorder for MockComputeService
type MockComputeServiceMockRecorder struct {
	mock *MockComputeService
}

// NewMockComputeService creates a new mock instance
func NewMockComputeService(ctrl *gomock.Controller) *MockComputeService {
	mock := &MockComputeService{ctrl: ctrl}
	mock.recorder = &MockComputeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockComputeService) EXPECT() *MockComputeServiceMockRecorder {
	return m.recorder
}

// CreateImage mocks base method
func (m *MockComputeService) CreateImage(ctx context.Context, request core.CreateImageRequest) (core.CreateImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateImage", ctx, request)
	ret0, _ := ret[0].(core.CreateImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateImage indicates an expected call of CreateImage
func (mr *MockComputeServiceMockRecorder) CreateImage(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateImage", reflect.TypeOf((*MockComputeService)(nil).CreateImage), ctx, request)
}

// ListImages mocks base method
func (m *MockComputeService) ListImages(ctx context.Context, request core.ListImagesRequest) (core.ListImagesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListImages", ctx, request)
	ret0, _ := ret[0].(core.ListImagesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListImages indicates an expected call of ListImages
func (mr *MockComputeServiceMockRecorder) ListImages(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListImages", reflect.TypeOf((*MockComputeService)(nil).ListImages), ctx, request)
}

// DeleteImage mocks base method
func (m *MockComputeService) DeleteImage(ctx context.Context, request core.DeleteImageRequest) (core.DeleteImageResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteImage", ctx, request)
	ret0, _ := ret[0].(core.DeleteImageResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteImage indicates an expected call of DeleteImage
func (mr *MockComputeServiceMockRecorder) DeleteImage(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteImage", reflect.TypeOf((*MockComputeService)(nil).DeleteImage), ctx, request)
}

// ListInstances mocks base method
func (m *MockComputeService) ListInstances(ctx context.Context, request core.ListInstancesRequest) (core.ListInstancesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListInstances", ctx, request)
	ret0, _ := ret[0].(core.ListInstancesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListInstances indicates an expected call of ListInstances
func (mr *MockComputeServiceMockRecorder) ListInstances(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListInstances", reflect.TypeOf((*MockComputeService)(nil).ListInstances), ctx, request)
}

// LaunchInstance mocks base method
func (m *MockComputeService) LaunchInstance(ctx context.Context, request core.LaunchInstanceRequest) (core.LaunchInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaunchInstance", ctx, request)
	ret0, _ := ret[0].(core.LaunchInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LaunchInstance indicates an expected call of LaunchInstance
func (mr *MockComputeServiceMockRecorder) LaunchInstance(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaunchInstance", reflect.TypeOf((*MockComputeService)(nil).LaunchInstance), ctx, request)
}

// TerminateInstance mocks base method
func (m *MockComputeService) TerminateInstance(ctx context.Context, request core.TerminateInstanceRequest) (core.TerminateInstanceResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminateInstance", ctx, request)
	ret0, _ := ret[0].(core.TerminateInstanceResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TerminateInstance indicates an expected call of TerminateInstance
func (mr *MockComputeServiceMockRecorder) TerminateInstance(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminateInstance", reflect.TypeOf((*MockComputeService)(nil).TerminateInstance), ctx, request)
}

// InstanceAction mocks base method
func (m *MockComputeService) InstanceAction(ctx context.Context, request core.InstanceActionRequest) (core.InstanceActionResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InstanceAction", ctx, request)
	ret0, _ := ret[0].(core.InstanceActionResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InstanceAction indicates an expected call of InstanceAction
func (mr *MockComputeServiceMockRecorder) InstanceAction(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InstanceAction", reflect.TypeOf((*MockComputeService)(nil).InstanceAction), ctx, request)
}

// AttachVolume mocks base method
func (m *MockComputeService) AttachVolume(ctx context.Context, request core.AttachVolumeRequest) (core.AttachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AttachVolume", ctx, request)
	ret0, _ := ret[0].(core.AttachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AttachVolume indicates an expected call of AttachVolume
func (mr *MockComputeServiceMockRecorder) AttachVolume(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AttachVolume", reflect.TypeOf((*MockComputeService)(nil).AttachVolume), ctx, request)
}

// DetachVolume mocks base method
func (m *MockComputeService) DetachVolume(ctx context.Context, request core.DetachVolumeRequest) (core.DetachVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DetachVolume", ctx, request)
	ret0, _ := ret[0].(core.DetachVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DetachVolume indicates an expected call of DetachVolume
func (mr *MockComputeServiceMockRecorder) DetachVolume(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DetachVolume", reflect.TypeOf((*MockComputeService)(nil).DetachVolume), ctx, request)
}

// ListVnicAttachments mocks base method
func (m *MockComputeService) ListVnicAttachments(ctx context.Context, request core.ListVnicAttachmentsRequest) (core.ListVnicAttachmentsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVnicAttachments", ctx, request)
	ret0, _ := ret[0].(core.ListVnicAttachmentsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVnicAttachments indicates an expected call of ListVnicAttachments
func (mr *MockComputeServiceMockRecorder) ListVnicAttachments(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVnicAttachments", reflect.TypeOf((*MockComputeService)(nil).ListVnicAttachments), ctx, request)
}

// MockNetworkService is a mock of NetworkService interface
type MockNetworkService struct {
	ctrl     *gomock.Controller
	recorder *MockNetworkServiceMockRecorder
}

// MockNetworkServiceMockRecorder is the mock recorder for MockNetworkService
type MockNetworkServiceMockRecorder struct {
	mock *MockNetworkService
}

// NewMockNetworkService creates a new mock instance
func NewMockNetworkService(ctrl *gomock.Controller) *MockNetworkService {
	mock := &MockNetworkService{ctrl: ctrl}
	mock.recorder = &MockNetworkServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNetworkService) EXPECT() *MockNetworkServiceMockRecorder {
	return m.recorder
}

// ListVcns mocks base method
func (m *MockNetworkService) ListVcns(ctx context.Context, request core.ListVcnsRequest) (core.ListVcnsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVcns", ctx, request)
	ret0, _ := ret[0].(core.ListVcnsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVcns indicates an expected call of ListVcns
func (mr *MockNetworkServiceMockRecorder) ListVcns(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVcns", reflect.TypeOf((*MockNetworkService)(nil).ListVcns), ctx, request)
}

// ListSubnets mocks base method
func (m *MockNetworkService) ListSubnets(ctx context.Context, request core.ListSubnetsRequest) (core.ListSubnetsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListSubnets", ctx, request)
	ret0, _ := ret[0].(core.ListSubnetsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListSubnets indicates an expected call of ListSubnets
func (mr *MockNetworkServiceMockRecorder) ListSubnets(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListSubnets", reflect.TypeOf((*MockNetworkService)(nil).ListSubnets), ctx, request)
}

// GetVnic mocks base method
func (m *MockNetworkService) GetVnic(ctx context.Context, request core.GetVnicRequest) (core.GetVnicResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVnic", ctx, request)
	ret0, _ := ret[0].(core.GetVnicResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetVnic indicates an expected call of GetVnic
func (mr *MockNetworkServiceMockRecorder) GetVnic(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVnic", reflect.TypeOf((*MockNetworkService)(nil).GetVnic), ctx, request)
}

// CreateNetworkSecurityGroup mocks base method
func (m *MockNetworkService) CreateNetworkSecurityGroup(ctx context.Context, request core.CreateNetworkSecurityGroupRequest) (core.CreateNetworkSecurityGroupResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNetworkSecurityGroup", ctx, request)
	ret0, _ := ret[0].(core.CreateNetworkSecurityGroupResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateNetworkSecurityGroup indicates an expected call of CreateNetworkSecurityGroup
func (mr *MockNetworkServiceMockRecorder) CreateNetworkSecurityGroup(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNetworkSecurityGroup", reflect.TypeOf((*MockNetworkService)(nil).CreateNetworkSecurityGroup), ctx, request)
}

// AddNetworkSecurityGroupSecurityRules mocks base method
func (m *MockNetworkService) AddNetworkSecurityGroupSecurityRules(ctx context.Context, request core.AddNetworkSecurityGroupSecurityRulesRequest) (core.AddNetworkSecurityGroupSecurityRulesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddNetworkSecurityGroupSecurityRules", ctx, request)
	ret0, _ := ret[0].(core.AddNetworkSecurityGroupSecurityRulesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddNetworkSecurityGroupSecurityRules indicates an expected call of AddNetworkSecurityGroupSecurityRules
func (mr *MockNetworkServiceMockRecorder) AddNetworkSecurityGroupSecurityRules(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddNetworkSecurityGroupSecurityRules", reflect.TypeOf((*MockNetworkService)(nil).AddNetworkSecurityGroupSecurityRules), ctx, request)
}

// MockWorkRequestService is a mock of WorkRequestService interface
type MockWorkRequestService struct {
	ctrl     *gomock.Controller
	recorder *MockWorkRequestServiceMockRecorder
}

// MockWorkRequestServiceMockRecorder is the mock recorder for MockWorkRequestService
type MockWorkRequestServiceMockRecorder struct {
	mock *MockWorkRequestService
}

// NewMockWorkRequestService creates a new mock instance
func NewMockWorkRequestService(ctrl *gomock.Controller) *MockWorkRequestService {
	mock := &MockWorkRequestService{ctrl: ctrl}
	mock.recorder = &MockWorkRequestServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockWorkRequestService) EXPECT() *MockWorkRequestServiceMockRecorder {
	return m.recorder
}

// GetWorkRequest mocks base method
func (m *MockWorkRequestService) GetWorkRequest(ctx context.Context, request workrequests.GetWorkRequestRequest) (workrequests.GetWorkRequestResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkRequest", ctx, request)
	ret0, _ := ret[0].(workrequests.GetWorkRequestResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkRequest indicates an expected call of GetWorkRequest
func (mr *MockWorkRequestServiceMockRecorder) GetWorkRequest(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkRequest", reflect.TypeOf((*MockWorkRequestService)(nil).GetWorkRequest), ctx, request)
}

// MockStorageService is a mock of StorageService interface
type MockStorageService struct {
	ctrl     *gomock.Controller
	recorder *MockStorageServiceMockRecorder
}

// MockStorageServiceMockRecorder is the mock recorder for MockStorageService
type MockStorageServiceMockRecorder struct {
	mock *MockStorageService
}

// NewMockStorageService creates a new mock instance
func NewMockStorageService(ctrl *gomock.Controller) *MockStorageService {
	mock := &MockStorageService{ctrl: ctrl}
	mock.recorder = &MockStorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStorageService) EXPECT() *MockStorageServiceMockRecorder {
	return m.recorder
}

// PutObject mocks base method
func (m *MockStorageService) PutObject(ctx context.Context, request objectstorage.PutObjectRequest) (objectstorage.PutObjectResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PutObject", ctx, request)
	ret0, _ := ret[0].(objectstorage.PutObjectResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// PutObject indicates an expected call of PutObject
func (mr *MockStorageServiceMockRecorder) PutObject(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PutObject", reflect.TypeOf((*MockStorageService)(nil).PutObject), ctx, request)
}

// MockBlockstorageService is a mock of BlockstorageService interface
type MockBlockstorageService struct {
	ctrl     *gomock.Controller
	recorder *MockBlockstorageServiceMockRecorder
}

// MockBlockstorageServiceMockRecorder is the mock recorder for MockBlockstorageService
type MockBlockstorageServiceMockRecorder struct {
	mock *MockBlockstorageService
}

// NewMockBlockstorageService creates a new mock instance
func NewMockBlockstorageService(ctrl *gomock.Controller) *MockBlockstorageService {
	mock := &MockBlockstorageService{ctrl: ctrl}
	mock.recorder = &MockBlockstorageServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockstorageService) EXPECT() *MockBlockstorageServiceMockRecorder {
	return m.recorder
}

// CreateVolume mocks base method
func (m *MockBlockstorageService) CreateVolume(ctx context.Context, request core.CreateVolumeRequest) (core.CreateVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateVolume", ctx, request)
	ret0, _ := ret[0].(core.CreateVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateVolume indicates an expected call of CreateVolume
func (mr *MockBlockstorageServiceMockRecorder) CreateVolume(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateVolume", reflect.TypeOf((*MockBlockstorageService)(nil).CreateVolume), ctx, request)
}

// ListVolumes mocks base method
func (m *MockBlockstorageService) ListVolumes(ctx context.Context, request core.ListVolumesRequest) (core.ListVolumesResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListVolumes", ctx, request)
	ret0, _ := ret[0].(core.ListVolumesResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListVolumes indicates an expected call of ListVolumes
func (mr *MockBlockstorageServiceMockRecorder) ListVolumes(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListVolumes", reflect.TypeOf((*MockBlockstorageService)(nil).ListVolumes), ctx, request)
}

// DeleteVolume mocks base method
func (m *MockBlockstorageService) DeleteVolume(ctx context.Context, request core.DeleteVolumeRequest) (core.DeleteVolumeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteVolume", ctx, request)
	ret0, _ := ret[0].(core.DeleteVolumeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteVolume indicates an expected call of DeleteVolume
func (mr *MockBlockstorageServiceMockRecorder) DeleteVolume(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteVolume", reflect.TypeOf((*MockBlockstorageService)(nil).DeleteVolume), ctx, request)
}
